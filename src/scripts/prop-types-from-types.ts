import type { Config as PrettierConfig } from 'prettier'
import type { ts } from 'typescript-to-proptypes'

import fs from 'fs'
import path from 'path'
import prettier from 'prettier'
import glob from 'glob'
import * as ttp from 'typescript-to-proptypes'

function getComponentName(componentDirName: string) {
  return componentDirName.split('/')[componentDirName.split('/').length - 1]
}

function getComponentJSXName(componentName: string) {
  return componentName
    .split('-')
    .map((e) => (`${e[0].toUpperCase()}${e.slice(1, e.length)}`))
    .join('')
}

function replacePropTypesExport(propTypes: string) {
  return propTypes.replace(/([z-zA-Z])\w+.propTypes/g, '')
}

function isServerComponent(componentName: string, componentDirName: string) {
  return fs.existsSync(path.join(
    componentDirName,
    `${componentName}.server.tsx`,
  ))
}

function isClientComponent(componentName: string, componentDirName: string) {
  return fs.existsSync(path.join(
    componentDirName,
    `${componentName}.client.tsx`,
  ))
}

function setPropTypes(
  componentName: string,
  componentDirName: string,
  componentJSXName: string,
  propTypes: string,
  prettierConfig: PrettierConfig,
) {
  const componentFilePath = path.join(
    componentDirName,
    componentName + (
      isServerComponent(componentName, componentDirName)
        ? '.server.tsx'
        : isClientComponent(componentName, componentDirName)
          ? '.client.tsx'
          : '.tsx'
    ),
  )

  const autoGeneratedComment = '// prop-types are auto-generated.'
  const exportWithMemoComment = '// export with memo'
  const disableProptypes = '// disable prop-types'

  const componentFileContent = fs.readFileSync(componentFilePath, {
    encoding: 'utf8',
  })

  if (!componentFileContent.includes(disableProptypes)) {
    const shouldExportWithMemo = componentFileContent
      .includes(exportWithMemoComment)
    const componentFilePropTypesContent = (
      `${autoGeneratedComment} do not manually edit below this line.
      // eslint-disable-next-line no-unused-vars
      ${(propTypes === '{}')
        ? ''
        : (
          `import PropTypes from 'prop-types'
          `
        )}
      ${componentJSXName}.propTypes = ${propTypes}
  
      export default ${shouldExportWithMemo
        ? `memo(${componentJSXName})`
        : componentJSXName}
    `)

    const componentFileContentWithExport = [
      componentFileContent.split(autoGeneratedComment)[0],
      prettier.format(componentFilePropTypesContent, {
        ...prettierConfig,
        filepath: componentFilePath,
      }),
    ].join(componentFileContent.split(autoGeneratedComment)?.[1] ? '' : '\n\n')

    fs.writeFileSync(componentFilePath, componentFileContentWithExport)
  }
}

function setPropTypesDef(componentDirName: string, componentJSXName: string) {
  const filePath = path.join(componentDirName, 'index.d.ts')
  const fileContent = `
    import type { TProps } from './types'
    export function ${componentJSXName}(props: TProps): JSX.Element
  `

  fs.writeFileSync(filePath, fileContent)
}

function setComponentExport(
  componentName: string,
  componentDirName: string,
  componentJSXName: string,
  prettierConfig: PrettierConfig,
) {
  const fileName = (
    isServerComponent(componentName, componentDirName)
      ? `${componentName}.server`
      : isClientComponent(componentName, componentDirName)
        ? `${componentName}.client`
        : componentName
  )

  const filePath = path.join(componentDirName, 'index.ts')
  const fileContent = `
    import ${componentJSXName} from './${fileName}'
    import { TProps } from './types'
    
    type T${componentJSXName}Props = TProps

    export { ${componentJSXName} }
    export default ${componentJSXName}
  `

  fs.writeFileSync(
    filePath,
    prettier
      .format(fileContent, {
        ...prettierConfig,
        filepath: filePath,
      })
      .replace(
        `type T${componentJSXName}Props`,
        `export type T${componentJSXName}Props`,
      ),
  )
}

function generatePropTypes(
  componentPaths: string[],
  ttpProgram: ts.Program,
  prettierConfig: PrettierConfig,
) {
  componentPaths.forEach((componentPath) => {
    const componentDirName = path.dirname(componentPath)
    const componentName = getComponentName(componentDirName)
    const componentJSXName = getComponentJSXName(componentName)

    const componentFileName = `${componentName}.tsx`
    const serverComponentFileName = `${componentName}.server.tsx`
    const clientComponentFileName = `${componentName}.client.tsx`
    const componentFilePath = path.join(
      componentDirName,
      isServerComponent(componentName, componentDirName)
        ? serverComponentFileName
        : isClientComponent(componentName, componentDirName)
          ? clientComponentFileName
          : componentFileName,
    )

    if (fs.existsSync(componentFilePath)) {
      let propTypes = ''
      let generatedPropTypes = (
        ttp.generate(ttp.parseFromProgram(componentPath, ttpProgram), {
          includeJSDoc: true,
        })
      )

      if (generatedPropTypes.includes('.propTypes = ')) {
        generatedPropTypes = replacePropTypesExport(generatedPropTypes)
        propTypes += `${generatedPropTypes
          .replace('= ', '')
          .replace('};', '}')}\n`
      } else {
        propTypes += '{}'
      }

      setPropTypes(
        componentName,
        componentDirName,
        componentJSXName,
        propTypes,
        prettierConfig,
      )
    }
  })
}

export function generatePropTypesFromTypes(
  componentDirectories: string[],
  prettierConfig: PrettierConfig,
  tsCompilerOptions: ts.CompilerOptions,
) {
  const componentDirs = []
  const componentPaths = []

  componentDirectories.forEach((componentLocation) => {
    componentDirs.push(...[
      ...glob.sync(componentLocation, {
        absolute: true,
        cwd: path.dirname('./'),
      }),
    ])
  })

  componentDirs.forEach((componentDir) => {
    const componentDirName = path.dirname(componentDir)
    const componentName = getComponentName(componentDirName)
    const componentJSXName = getComponentJSXName(componentName)
    const propTypesDefFileName = 'index.d.ts'

    setPropTypesDef(componentDirName, componentJSXName)
    setComponentExport(
      componentName,
      componentDirName,
      componentJSXName,
      prettierConfig,
    )

    componentPaths.push(path.join(componentDirName, propTypesDefFileName))
  })

  generatePropTypes(
    componentPaths,
    ttp.createProgram(componentPaths, tsCompilerOptions),
    prettierConfig,
  )

  componentPaths.forEach((componentPath) => {
    fs.rmSync(componentPath)
  })
}
